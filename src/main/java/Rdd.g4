grammar Rdd;//parserstart : SC DOT RANGE LP NUMBER COMMA NUMBER RP mapops DOT COLLECT LP RP;mapops : mapops DOT MAP LP udf RP       |;udf : ID ARROW expression;expression : simpleexpression           | LB complexexpression RB;simpleexpression : pureexpression                 | LP tupleexpression RP;tupleexpression : pureexpression COMMA pureexpression                | tupleexpression COMMA pureexpression;complexexpression : simpleexpression                  | assignmentexpressions SEMICOLON simpleexpression;assignmentexpressions : assignmentexpression                      | assignmentexpressions SEMICOLON assignmentexpression;assignmentexpression : VAL ID ASSIGN pureexpression;pureexpression : NUMBER               | ID               | ID DOT ID               | LP pureexpression RP               | pureexpression OP pureexpression               | IF LP comparisonexpression RP pureexpression ELSE pureexpression;comparisonexpression : pureexpression COMP pureexpression;//lexerWHITESPACE : ( '\t' | ' ' | '\r' | '\n'| '\u000C' )+ -> skip;SC : 'sc';ID:('a'..'z'|'A'..'Z')(('a'..'z'|'A'..'Z') | ('0'..'9')+)*;NUMBER : ('0'..'9')+;VAL : 'val';IF : 'if';ELSE : 'else';ASSIGN : '=';DOT : '.';OP : '+' | '-' | '*' | '%';COMP : '==' | '<' | '>' | '!=' | '>=' | '<=';COMMA : ',';SEMICOLON : ';';ARROW : '=>';LB : '{';RB : '}';LP : '(';RP : ')';RANGE : 'range';COLLECT : 'collect';MAP : 'map';